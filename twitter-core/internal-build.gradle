/*
 * Copyright (C) 2015 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply from: rootProject.qualityScript
apply from: rootProject.deployScript
apply plugin: io.fabric.gradle.weaving.ArtifactSizePlugin
apply plugin: io.fabric.gradle.weaving.FabricPropertiesPlugin
apply plugin: io.fabric.gradle.weaving.DexMethodCountPlugin

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        versionCode 1
        versionName version
        minSdkVersion rootProject.minSdkVersion.twitter
        consumerProguardFiles 'proguard.txt'
    }

    def scribeEndpointOverride
    if (project.hasProperty('scribeEndpointOverride')) {
        scribeEndpointOverride = project.getProperty('scribeEndpointOverride')
    } else {
        scribeEndpointOverride = ''
    }
    def scribeSequence
    if (project.hasProperty("scribeSequence")) {
        scribeSequence = project.getProperty('scribeSequence')
    } else {
        scribeSequence = ''
    }

    buildTypes {
        debug {
            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            buildConfigField "String", "SCRIBE_ENDPOINT_OVERRIDE", "\"${scribeEndpointOverride}\""
            buildConfigField "String", "SCRIBE_SEQUENCE", "\"${scribeSequence}\""

            testCoverageEnabled enableTestCodeCoverage
        }

        release {
            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            buildConfigField "String", "SCRIBE_ENDPOINT_OVERRIDE", "\"${scribeEndpointOverride}\""
            buildConfigField "String", "SCRIBE_SEQUENCE", "\"${scribeSequence}\""
        }
    }

    lintOptions {
        warningsAsErrors true
    }

    dexMethodCount {
        packageFilter = "com.twitter.sdk.android.core"
    }

    //Gradle publishes only release by default for multi module projects
    //This will publish all build variants and we can specifically choose them
    defaultPublishConfig 'release'
    publishNonDefault true

    compileOptions {
        sourceCompatibility rootProject.sourceCompatibilityVersion
        targetCompatibility rootProject.targetCompatibilityVersion
    }
}

dependencies {
    compile dependency.retrofit
    compile dependency.retrofitGsonConverter
    compile dependency.gson
    compile dependency.okHttp
    compile dependency.fabric

    androidTestCompile dependency.mockito
    androidTestCompile dependency.dexmakerMockito
    androidTestCompile dependency.fabricTest
    androidTestCompile (dependency.junitAddons) {
        transitive = false
    }

    testCompile dependency.fabricTest
    testCompile dependency.mockito
    testCompile dependency.junit
    testCompile dependency.retrofitMock
    testCompile(dependency.robolectric) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile (dependency.junitAddons) {
        transitive = false
    }
}
